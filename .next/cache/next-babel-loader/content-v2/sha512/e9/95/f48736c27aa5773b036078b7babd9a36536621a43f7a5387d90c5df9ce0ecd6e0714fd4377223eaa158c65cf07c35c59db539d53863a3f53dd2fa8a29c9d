{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/eun_ji/Documents/GitHub/nextjs-blog/components/posts/post-detail/post-content.js\";\nimport ReactMarkdown from \"react-markdown\";\nimport Image from \"next/image\";\nimport { PrismLight as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport atomDark from \"react-syntax-highlighter/dist/cjs/styles/prism/atom-dark\";\nimport js from \"react-syntax-highlighter/dist/cjs/languages/prism/javascript\";\nimport css from \"react-syntax-highlighter/dist/cjs/languages/prism/css\";\nimport PostHeader from \"./post-header\";\nimport classes from \"./post-content.module.css\";\nSyntaxHighlighter.registerLanguage(\"js\", js);\nSyntaxHighlighter.registerLanguage(\"css\", css);\n\nfunction PostContent(props) {\n  const {\n    post\n  } = props;\n  const imagePath = `/images/posts/${post.slug}/${post.image}`;\n  const customRenderers = {\n    img(image) {\n      return /*#__PURE__*/_jsxDEV(Image, {\n        src: `/images/posts/${post.slug}/${image.src}`,\n        alt: image.alt,\n        width: 400,\n        height: 500\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this);\n    },\n\n    p(paragraph) {\n      const {\n        node\n      } = paragraph;\n\n      if (node.children[0].tagname === \"img\") {\n        const image = node.children[0];\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.image,\n          children: /*#__PURE__*/_jsxDEV(Image, {\n            src: `/images/posts/${post.slug}/${image.properties.src}`,\n            alt: image.alt,\n            width: 400,\n            height: 500\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this);\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: paragraph.children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 14\n      }, this);\n    },\n\n    code(code) {\n      const {\n        className,\n        children\n      } = code;\n      const language = className.split(\"-\")[1]; // className is something like language-js => We need the \"js\" part here\n\n      return /*#__PURE__*/_jsxDEV(SyntaxHighlighter, {\n        style: atomDark,\n        language: language,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this);\n    }\n\n  };\n  return /*#__PURE__*/_jsxDEV(\"article\", {\n    className: classes.content,\n    children: [/*#__PURE__*/_jsxDEV(PostHeader, {\n      title: post.title,\n      image: imagePath\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n      components: customRenderers,\n      children: post.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\nexport default PostContent;","map":{"version":3,"sources":["/Users/eun_ji/Documents/GitHub/nextjs-blog/components/posts/post-detail/post-content.js"],"names":["ReactMarkdown","Image","PrismLight","SyntaxHighlighter","atomDark","js","css","PostHeader","classes","registerLanguage","PostContent","props","post","imagePath","slug","image","customRenderers","img","src","alt","p","paragraph","node","children","tagname","properties","code","className","language","split","content","title"],"mappings":";;AAAA,OAAOA,aAAP,MAA0B,gBAA1B;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,SAASC,UAAU,IAAIC,iBAAvB,QAAgD,0BAAhD;AACA,OAAOC,QAAP,MAAqB,0DAArB;AACA,OAAOC,EAAP,MAAe,8DAAf;AACA,OAAOC,GAAP,MAAgB,uDAAhB;AAEA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAEAL,iBAAiB,CAACM,gBAAlB,CAAmC,IAAnC,EAAyCJ,EAAzC;AACAF,iBAAiB,CAACM,gBAAlB,CAAmC,KAAnC,EAA0CH,GAA1C;;AAEA,SAASI,WAAT,CAAqBC,KAArB,EAA4B;AAC1B,QAAM;AAAEC,IAAAA;AAAF,MAAWD,KAAjB;AAEA,QAAME,SAAS,GAAI,iBAAgBD,IAAI,CAACE,IAAK,IAAGF,IAAI,CAACG,KAAM,EAA3D;AAEA,QAAMC,eAAe,GAAG;AACtBC,IAAAA,GAAG,CAACF,KAAD,EAAQ;AACT,0BACE,QAAC,KAAD;AACE,QAAA,GAAG,EAAG,iBAAgBH,IAAI,CAACE,IAAK,IAAGC,KAAK,CAACG,GAAI,EAD/C;AAEE,QAAA,GAAG,EAAEH,KAAK,CAACI,GAFb;AAGE,QAAA,KAAK,EAAE,GAHT;AAIE,QAAA,MAAM,EAAE;AAJV;AAAA;AAAA;AAAA;AAAA,cADF;AAQD,KAVqB;;AAWtBC,IAAAA,CAAC,CAACC,SAAD,EAAY;AACX,YAAM;AAAEC,QAAAA;AAAF,UAAWD,SAAjB;;AAEA,UAAIC,IAAI,CAACC,QAAL,CAAc,CAAd,EAAiBC,OAAjB,KAA6B,KAAjC,EAAwC;AACtC,cAAMT,KAAK,GAAGO,IAAI,CAACC,QAAL,CAAc,CAAd,CAAd;AAEA,4BACE;AAAK,UAAA,SAAS,EAAEf,OAAO,CAACO,KAAxB;AAAA,iCACE,QAAC,KAAD;AACE,YAAA,GAAG,EAAG,iBAAgBH,IAAI,CAACE,IAAK,IAAGC,KAAK,CAACU,UAAN,CAAiBP,GAAI,EAD1D;AAEE,YAAA,GAAG,EAAEH,KAAK,CAACI,GAFb;AAGE,YAAA,KAAK,EAAE,GAHT;AAIE,YAAA,MAAM,EAAE;AAJV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF;AAUD;;AAED,0BAAO;AAAA,kBAAIE,SAAS,CAACE;AAAd;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KA9BqB;;AAgCtBG,IAAAA,IAAI,CAACA,IAAD,EAAO;AACT,YAAM;AAAEC,QAAAA,SAAF;AAAaJ,QAAAA;AAAb,UAA0BG,IAAhC;AACA,YAAME,QAAQ,GAAGD,SAAS,CAACE,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAAjB,CAFS,CAEiC;;AAC1C,0BACE,QAAC,iBAAD;AACE,QAAA,KAAK,EAAEzB,QADT;AAEE,QAAA,QAAQ,EAAEwB,QAFZ;AAGE,QAAA,QAAQ,EAAEL;AAHZ;AAAA;AAAA;AAAA;AAAA,cADF;AAOD;;AA1CqB,GAAxB;AA6CA,sBACE;AAAS,IAAA,SAAS,EAAEf,OAAO,CAACsB,OAA5B;AAAA,4BACE,QAAC,UAAD;AAAY,MAAA,KAAK,EAAElB,IAAI,CAACmB,KAAxB;AAA+B,MAAA,KAAK,EAAElB;AAAtC;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,aAAD;AAAe,MAAA,UAAU,EAAEG,eAA3B;AAAA,gBAA6CJ,IAAI,CAACkB;AAAlD;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;AAED,eAAepB,WAAf","sourcesContent":["import ReactMarkdown from \"react-markdown\";\nimport Image from \"next/image\";\nimport { PrismLight as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport atomDark from \"react-syntax-highlighter/dist/cjs/styles/prism/atom-dark\";\nimport js from \"react-syntax-highlighter/dist/cjs/languages/prism/javascript\";\nimport css from \"react-syntax-highlighter/dist/cjs/languages/prism/css\";\n\nimport PostHeader from \"./post-header\";\nimport classes from \"./post-content.module.css\";\n\nSyntaxHighlighter.registerLanguage(\"js\", js);\nSyntaxHighlighter.registerLanguage(\"css\", css);\n\nfunction PostContent(props) {\n  const { post } = props;\n\n  const imagePath = `/images/posts/${post.slug}/${post.image}`;\n\n  const customRenderers = {\n    img(image) {\n      return (\n        <Image\n          src={`/images/posts/${post.slug}/${image.src}`}\n          alt={image.alt}\n          width={400}\n          height={500}\n        />\n      );\n    },\n    p(paragraph) {\n      const { node } = paragraph;\n\n      if (node.children[0].tagname === \"img\") {\n        const image = node.children[0];\n\n        return (\n          <div className={classes.image}>\n            <Image\n              src={`/images/posts/${post.slug}/${image.properties.src}`}\n              alt={image.alt}\n              width={400}\n              height={500}\n            />\n          </div>\n        );\n      }\n\n      return <p>{paragraph.children}</p>;\n    },\n\n    code(code) {\n      const { className, children } = code;\n      const language = className.split(\"-\")[1]; // className is something like language-js => We need the \"js\" part here\n      return (\n        <SyntaxHighlighter\n          style={atomDark}\n          language={language}\n          children={children}\n        />\n      );\n    },\n  };\n\n  return (\n    <article className={classes.content}>\n      <PostHeader title={post.title} image={imagePath} />\n      <ReactMarkdown components={customRenderers}>{post.content}</ReactMarkdown>\n    </article>\n  );\n}\n\nexport default PostContent;\n"]},"metadata":{},"sourceType":"module"}